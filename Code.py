# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gE--7kzyKXRJTNu6c3GuAvTGZoRExBAK
"""

import pandas as pd
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_auc_score

flights = pd.read_csv('/content/flights.csv')
flights

flights_needed_data = flights[0:100000]  # getting a segment

flights_needed_data

flights_needed_data.info()  # for an insight into the data

flights_needed_data.value_counts('DIVERTED')  # will tell us the no. of flights which were diverted

"""Data Visualization"""

sb.jointplot(data=flights_needed_data, x="SCHEDULED_ARRIVAL", y="ARRIVAL_TIME")

corr = flights_needed_data.corr(method='pearson')

sb.heatmap(corr)

corr

# filtering out unnecessary columns
flights_needed_data=flights_needed_data.drop(['YEAR','FLIGHT_NUMBER','AIRLINE','DISTANCE','TAIL_NUMBER','TAXI_OUT',
                                              'SCHEDULED_TIME','DEPARTURE_TIME','WHEELS_OFF','ELAPSED_TIME',
                                              'AIR_TIME','WHEELS_ON','DAY_OF_WEEK','TAXI_IN','CANCELLATION_REASON'],
                                             axis=1)

flights_needed_data

# replacing all NaN values with the mean of the attribute in which they are present
flights_needed_data=flights_needed_data.fillna(flights_needed_data.mean())

flights_needed_data

# creating a new column; it will tell if the flight was delayed or not
result=[]

for row in flights_needed_data['ARRIVAL_DELAY']:
  if row > 15:
    result.append(1)
  else:
    result.append(0)

flights_needed_data['result'] = result

flights_needed_data

flights_needed_data.value_counts('result')

# removing some more columns
flights_needed_data=flights_needed_data.drop(['ORIGIN_AIRPORT', 'DESTINATION_AIRPORT', 'ARRIVAL_TIME', 'ARRIVAL_DELAY'],axis=1)
flights_needed_data

"""Splitting Data for Training and Testing"""

data = flights_needed_data.values
X, y = data[:,:-1], data[:,-1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)  # splitting in the ratio 70:30

scaled_features = StandardScaler().fit_transform(X_train, X_test)

"""Applying Decision Tree Classifier on Training Data"""

clf = DecisionTreeClassifier()
clf = clf.fit(X_train,y_train)

pred_prob = clf.predict_proba(X_test)
auc_score = roc_auc_score(y_test, pred_prob[:,1])
auc_score